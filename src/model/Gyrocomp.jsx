/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.11 gyrocomp.glb 
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { Bloom, DepthOfField, EffectComposer, Noise, Vignette } from '@react-three/postprocessing'
import { BlurPass, Resizer, KernelSize, Resolution } from 'postprocessing'



export function Model(props) {
  const { nodes, materials } = useGLTF('/gyrocomp.glb')
  const ref = useRef()
  const ref1 = useRef()
  const ref2 = useRef()
  const matRef = useRef()

  useFrame((state, delta) => {
    ref.current.rotation.x += delta * 2
    ref.current.rotation.z += delta * 2
    ref.current.rotation.y += delta * 2




    ref1.current.rotation.x += delta * 4
    ref1.current.rotation.z += delta * 4
    ref1.current.rotation.y += delta * 6
    ref2.current.rotation.x += delta * 4
    ref2.current.rotation.z += delta * 4
    ref2.current.rotation.y += delta * 6


  })
  return (
    <group {...props} dispose={null}>
      <mesh ref={ref} geometry={nodes.Cylinder.geometry} material={nodes.Cylinder.material} scale={[0.524, 0.073, 0.524]} >
        <meshPhongMaterial shininess={100} specular='red' reflectivity={0.5} color='#333333' />
      </mesh>
      <mesh ref={ref1} geometry={nodes.Cylinder001.geometry} scale={[0.65, 0.05, 0.65]} >
        <meshPhongMaterial shininess={100} specular='red' reflectivity={0.5} color='#333333' />
      </mesh>

      <mesh ref={ref2} scale={1} geometry={nodes.Cylinder002.geometry} >
        <meshStandardMaterial emissive='red' emissiveIntensity={2} toneMapped={false} />
        <EffectComposer>
          <Bloom luminanceThreshold={0}
            luminanceSmoothing={5} height={300} />


        </EffectComposer>

      </mesh>
    </group>
  )
}

useGLTF.preload('/gyrocomp.glb')
